#!/bin/python3
import gi
gi.require_version('Gtk', '3.0')
from gi.repository import Gtk as gtk

import os

class displays_window:
    def disable_buttons(self):
        self.cancel.set_sensitive(False)
        self.setup_dvi.set_sensitive(False)
        self.setup_dp.set_sensitive(False)
        self.return_lvds.set_sensitive(False)

    def cancel_action(self,btn):
        self.disable_buttons()
        gtk.main_quit()

    def setup_dvimonitor_action(self,btn):
        self.disable_buttons()
        self.status.set_label("Suspending, please standby...")
        os.system("xrandr --output HDMI-1 --auto; xrandr --output LVDS-1 --off; ~/.fehbg")
        gtk.main_quit()

    def setup_dpmonitor_action(self,btn):
        self.disable_buttons()
        self.status.set_label("Suspending, please standby...")
        os.system("xrandr --output DP-1 --auto; xrandr --output LVDS-1 --off; ~/.fehbg")
        gtk.main_quit()

    def return_lvds_action(self,btn):
        self.disable_buttons()
        self.status.set_label("Suspending, please standby...")
        os.system("xrandr --output HDMI-1 --off; xrandr --output DP-1 --off; xrandr --output LVDS-1 --auto; ~/.fehbg")
        gtk.main_quit()

    def create_window(self):
        self.window = gtk.Window()
        title = "Exiting... Choose an option:"
        self.window.set_title(title)
        self.window.set_border_width(5)
        self.window.set_size_request(450, 80)
        self.window.set_resizable(False)
        self.window.set_keep_above(True)
        self.window.stick
        self.window.set_position(1)
        self.window.connect("delete_event", gtk.main_quit)
        
        #Create HBox for buttons
        self.button_box = gtk.HBox()
        self.button_box.show()
        
        #Cancel button
        self.cancel = gtk.Button(label="Cancel")
        self.cancel.set_border_width(4)
        self.cancel.connect("clicked", self.cancel_action)
        self.button_box.pack_start(self.cancel, False, False, 0)
        self.cancel.show()
        
        #Setup DVI Monitor button
        self.setup_dvi = gtk.Button(label="Setup DVI")
        self.setup_dvi.set_border_width(4)
        self.setup_dvi.connect("clicked", self.setup_dvimonitor_action)
        self.button_box.pack_start(self.setup_dvi, False, False, 0)
        self.setup_dvi.show()
        
        #Setup DP button
        self.setup_dp = gtk.Button(label="Setup DP")
        self.setup_dp.set_border_width(4)
        self.setup_dp.connect("clicked", self.setup_dpmonitor_action)
        self.button_box.pack_start(self.setup_dp, False, False, 0)
        self.setup_dp.show()

        #Return to LVDS-1
        self.return_lvds = gtk.Button(label="Return to LVDS-1")
        self.return_lvds.set_border_width(4)
        self.return_lvds.connect("clicked", self.return_lvds_action)
        self.button_box.pack_start(self.return_lvds, False, False, 0)
        self.return_lvds.show()
        
        #Create HBox for status label
        self.label_box = gtk.HBox()
        self.label_box.show()
        self.status = gtk.Label()
        self.status.show()
        self.label_box.pack_start(self.status, False, False, 0)
        
        #Create VBox and pack the above HBox's
        self.vbox = gtk.VBox()
        self.vbox.pack_start(self.button_box, False, False, 0)
        self.vbox.pack_start(self.label_box, False, False, 0)
        self.vbox.show()
        
        self.window.add(self.vbox)
        self.window.show()
        
    def __init__(self):
        self.create_window()


def main():
    gtk.main()

if __name__ == "__main__":
    go = displays_window()
    main()
