#!/bin/python3
import gi
gi.require_version('Gtk', '3.0')
from gi.repository import Gtk as gtk

import os

class exit_window:
    def disable_buttons(self):
        self.cancel.set_sensitive(False)
        self.logout.set_sensitive(False)
        self.lock.set_sensitive(False)
        self.suspend.set_sensitive(False)
        self.reboot.set_sensitive(False)
        self.shutdown.set_sensitive(False)

    def cancel_action(self,btn):
        self.disable_buttons()
        gtk.main_quit()

    def logout_action(self,btn):
        self.disable_buttons()
        self.status.set_label("Exiting i3, please standby...")
        os.system("i3-msg exit")
        os.system("qtile shell -c 'shutdown()'")

    def lock_action(self,btn):
        self.disable_buttons()
        self.status.set_label("Locking screen, please standby...")
        os.system("i3lock-fancy -f roboto")
        gtk.main_quit()

    def suspend_action(self,btn):
        self.disable_buttons()
        self.status.set_label("Suspending, please standby...")
        os.system("systemctl suspend")
        os.system("i3lock-fancy -f roboto")
        gtk.main_quit()

    def reboot_action(self,btn):
        self.disable_buttons()
        self.status.set_label("Rebooting, please standby...")
        os.system("systemctl reboot")

    def shutdown_action(self,btn):
        self.disable_buttons()
        self.status.set_label("Shutting down, please standby...")
        os.system("systemctl poweroff")

    def create_window(self):
        self.window = gtk.Window()
        title = "Exiting... Choose an option:"
        self.window.set_title(title)
        self.window.set_border_width(5)
        self.window.set_size_request(500, 80)
        self.window.set_resizable(False)
        self.window.set_keep_above(True)
        self.window.stick
        self.window.set_position(1)
        self.window.connect("delete_event", gtk.main_quit)
        
        #Create HBox for buttons
        self.button_box = gtk.HBox()
        self.button_box.show()
        
        #Cancel button
        self.cancel = gtk.Button(label="Cancel")
        self.cancel.set_border_width(4)
        self.cancel.connect("clicked", self.cancel_action)
        self.button_box.pack_start(self.cancel, False, False, 0)
        self.cancel.show()
        
        #Logout button
        self.logout = gtk.Button(label="Log out")
        self.logout.set_border_width(4)
        self.logout.connect("clicked", self.logout_action)
        self.button_box.pack_start(self.logout, False, False, 0)
        self.logout.show()

        #Lock button
        self.lock = gtk.Button(label="Lock")
        self.lock.set_border_width(4)
        self.lock.connect("clicked", self.lock_action)
        self.button_box.pack_start(self.lock, False, False, 0)
        self.lock.show()
        
        #Suspend button
        self.suspend = gtk.Button(label="Suspend")
        self.suspend.set_border_width(4)
        self.suspend.connect("clicked", self.suspend_action)
        self.button_box.pack_start(self.suspend, False, False, 0)
        self.suspend.show()
        
        #Reboot button
        self.reboot = gtk.Button(label="Reboot")
        self.reboot.set_border_width(4)
        self.reboot.connect("clicked", self.reboot_action)
        self.button_box.pack_start(self.reboot, False, False, 0)
        self.reboot.show()
        
        #Shutdown button
        self.shutdown = gtk.Button(label="Power off")
        self.shutdown.set_border_width(4)
        self.shutdown.connect("clicked", self.shutdown_action)
        self.button_box.pack_start(self.shutdown, False, False, 0)
        self.shutdown.show()
        
        #Create HBox for status label
        self.label_box = gtk.HBox()
        self.label_box.show()
        self.status = gtk.Label()
        self.status.show()
        self.label_box.pack_start(self.status, False, False, 0)
        
        #Create VBox and pack the above HBox's
        self.vbox = gtk.VBox()
        self.vbox.pack_start(self.button_box, False, False, 0)
        self.vbox.pack_start(self.label_box, False, False, 0)
        self.vbox.show()
        
        self.window.add(self.vbox)
        self.window.show()
        
    def __init__(self):
        self.create_window()


def main():
    gtk.main()

if __name__ == "__main__":
    go = exit_window()
    main()
